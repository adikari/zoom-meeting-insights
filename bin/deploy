#!/bin/bash

set -euo pipefail

CURRENT_AWS_ROLE="$(aws sts get-caller-identity)"
AWS_ACCOUNT_ID=$(echo "$CURRENT_AWS_ROLE" | jq -r '.Account')

STAGE=""

usage="USAGE: $(basename "$0") [-s|--stage] <stage>

where:
    -s | --stage        stage for deployment (required)
    -h | --help         show this help text"

while [ $# -gt 0 ]; do
    if [[ $1 =~ "--"* ]]; then
        case $1 in
            --help|-h) echo "$usage"; exit; ;;
            --stage|-s) STAGE=$2;;
        esac
    fi
    shift
done

export AWS_ACCOUNT_ID
export STAGE

if [ -z "$AWS_ACCOUNT_ID" ]; then
  echo "Could not read determine AWS account id.";
  exit 1;
fi

if [ -z "$STAGE" ]; then
  echo "$usage"; exit 1;
fi

CURRENT_DIR=$(pwd)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. && pwd )"

echo "Moving to $DIR"

cd "$DIR"

echo "AWS Account ID: $AWS_ACCOUNT_ID"
echo "Initiating deploy with: ${CURRENT_AWS_ROLE}"

echo "Deploying configuration..."
yarn oprah run --stage "$STAGE"

echo "Deploying resources..."
yarn kumo run --stage "$STAGE"

echo "Deploying serverless..."
# use the serverless version installed in the project
./node_modules/.bin/sls deploy --stage "$STAGE" --region "$AWS_REGION" --verbose --aws-s3-accelerate

echo "Generating graphql schema..."
./bin/generate-schema

# Push schema to apollo engine
ENGINE_API_KEY=$(yarn --silent oprah fetch -k /"$STAGE"/schedule/secret/ENGINE_API_KEY -s "$STAGE")
yarn apollo service:push --tag="$STAGE" --key="$ENGINE_API_KEY"

echo "Broadcasting changes to sputnik..."
SPUTNIK_API_KEY=$(yarn --silent oprah fetch -k /"$STAGE"/schedule/secret/SPUTNIK_API_KEY -s "$STAGE")
export SPUTNIK_API_KEY
yarn sputnik broadcast

# Clean up
cd "$CURRENT_DIR"
unset AWS_ACCOUNT_ID
unset STAGE
